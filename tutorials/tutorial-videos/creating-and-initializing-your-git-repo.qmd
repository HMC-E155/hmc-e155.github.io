---
title: Creating and Initializing Your Git Repo
categories: [Video, Software Tools]
---

1. Create a new folder for your project. Here is a suggested template folder structure to use. Add a few sentences to your README to describe the contents of the repository. For example, for this lab you might say something about holding code to verify that your FPGA and MCU are working properly.

```markdown
/
├── fpga
│   ├── src
│   ├── sim
│   ├── radiant_project
│   ├── .gitignore
├── mcu
│   ├── src
│   ├── segger_project
│   ├── .gitignore
├── README.md
```


2. Populate your .gitignore files. This file tells git which files and folders should not be tracked. It's best practice to ignore many of the miscellaneous configuration files that Radiant and SEGGER Embedded Studio generate. Sample .gitignore files are included below. Paste the contents of these files into the .gitignore files you created.

> Sample Radiant .gitignore
  ```
  # Lattice Radiant files
  *.html
  impl*/
  *.xml
  .build_status
  .run_manager.ini
  .recovery
  .spread_sheet.ini
  .spreadsheet_view.ini
  *.dir/
  *.log
  *.tcl
  *.ccl
  *.srp
  *.dmp
  ._Real_._Math_.vhd
  ```

> Sample SEGGER Embedded Studio .gitignore
  ```
  # Segger Embedded Studio
  **/Output/
  **/Debug/
  *.emSession
  *.jlink
  ```

3. Initialize your git repository using `git init`.
4. Add the existing files in your folder using `git add .`. (Note: the `.` means to add all the contents of the current directory, so you'll need to make sure you're at the root).
5. Make an initial commit with the folder structure above by typing `git commit -m "Initializing Lab 1 repository"`.
6. Open the Github web interface and create a new repository on Github ([link](https://github.com/new)). Name your repository something descriptive like `e155-lab1`. Optionally add a short description.
7. Link your local git repository to the new remote repository by adding a new remote. This will look something like `git remote set-url origin git@github.com:<username>/<repo>.git` where you'll need to replace `<username>` and `<repo>` with your specific information. For my example, this command is ``git remote set-url origin git@github.com:joshbrake/e155-lab1.git`
8. Push your local commit to the remote using `git push origin main`. If git complains that it doesn't know what main is, then your branch might be named master. In this case, run `git branch -m master main` and run the push command again.
9. Navigate to your repository page on Github and you should see your folder structure there.

Here's a video walking through the steps above as well.

<div style="position: relative; padding-bottom: 64.63195691202873%; height: 0;"><iframe src="https://www.loom.com/embed/ee828a5b3c024653a9c210d2451a7251?sid=844f2d0e-c6b0-47ef-aacd-5e7cb4b36aab" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe></div>

{{< include /resources/github-issue-footer.qmd >}}