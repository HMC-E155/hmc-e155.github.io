---
title: Best Practices for HDL Coding
subtitle: a.k.a. How to write HDL that won't make you want to pull your hair out
author: Josh Brake
---

## Overview

Writing HDL code *seems* similar to writing code that runs on a processor core in a programming language like C or Python.
However, this impression is misleading and is the source of a great deal of confusion for many novice digital designers.

The number one, most important lesson you need to internalize before you write a line of HDL code is this: **you absolutely, 100% must know what hardware you're trying to imply before you write a line of code.**
If you just start writing code without having a clear idea of the hardware that you're hoping to get at the end of the day (e.g., combinational logic blocks and flip-flops), you're in for a world of hurt.

The tips and advice in this document are geared toward helping you become a knowledgeable digital designer.

## Before Writing Code

## While you are coding your design

## Conventions

### File Names

### Module Names

### Signal Names

### Constants

### Indenting

### Commenting

## Assignment Statements

## General SystemVerilog Coding Practices 

## Resources for Learning More

- IEEE SystemVerilog Standards
- Best Practices for HDL Coding from Paul Hummel