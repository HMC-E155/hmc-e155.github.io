---
title: 'Lab 1: FPGA and MCU Setup and Testing'
format:
  html:
    other-links:
      - text: "Specifications"
        href: ./specs.html
        icon: file-earmark-check
      - text: "AI Prototype"
        href: ./ai-prototype.html
        icon: robot
      - text: "iCE40 UltraPlus Family Data Sheet"
        href: /assets/doc/FPGA-DS-02008-2-0-iCE40-UltraPlus-Family-Data-Sheet.pdf
      - text: "Lattice Radiant Installation Tutorial"
        href: /tutorials/tutorial-posts/lattice-radiant-installation/
      - text: "Lattice Radiant iCE40 Project Setup"
        href: /tutorials/tutorial-posts/lattice-radiant-ice40-ultraplus-project-setup
      - text: "Interactive Dev Board BOM"
        href: /assets/doc/E155_v4_Dev_Board_BOM.html
    code-links:
      - text: "Starter Code"
        href: https://github.com/HMC-E155/hmc-e155/tree/main/lab/lab01
        icon: github
---

## Introduction

In this lab you will familiarize yourself with the microcontroller unit (MCU) and field-programmable gate array (FPGA) development boards we will be using this semester.

- [Specs](specs.qmd)
- [AI Prototype](ai-prototype.qmd)

## Learning Objectives

By the end of this lab you will have...

- Assembled your development board for the class and tested out your MCU and FPGA boards.
- Written a Verilog module to control LEDs and a 7-segment display.
- Programmed the FPGA with Verilog code.
- Gained confidence in building, assembling, testing, and debugging circuits.
- Interfaced a 7-segment display to the board.

## Requirements

Follow the steps in this guide to test your FPGA and MCU boards. Write some Verilog code to exercise the FPGA using the switches, LEDs, and a 7-segment display to ensure your board is operational. Simulate and synthesize your code, then upload it to the flash memory and re-test the board. Hook up a 7-segment display and demonstrate that it works.

## Before You Start

Before you start working on this lab, you should familiarize yourself with the documentation for both the UPduino v3.1 and Nucleo-L432KC boards. The website has links for the UPduino v3.1 User Guide and the Nucleo-L432KC User Manuals on the Resources tab. These two documents contain information that will be helpful for answering questions that you may have during the course of this lab.

## Background

In the 1980’s and 1990’s, digital design projects were built from a truckload of chips, each containing a few logic gates such as 74xx series logic gates or simple programmable array logic chips (PALs). Such projects involve placing and wiring together dozens of chips on a breadboard. It was easy to make a wiring mistake or burn out a chip and spend hours tracking down the problem. Now you can perform all of your digital logic on a single field-programmable gate array (FPGA) to greatly reduce the necessary wiring and number of chips. Later in the course, you will use the Cortex-M4 microcontroller to write programs in assembly language and C that can interface with external hardware and the FPGA.


## Nucleo-L432KC Development Board

The Nucleo-L432KC development board provides a convenient platform to test and develop embedded systems applications. The board is focused around an STM32L432KC MCU and provides voltage regulators to provide power to the chip, various breakout headers which allow access to the pins of the microcontroller chip, a reset button and user input button, configuration jumpers, and an embedded ST-LINK programmer/debugger.

### Programming

The STM32L432KC has an embedded ST-LINK/V2-1 programmer and debugger as described in the Nucleo-32 User Manual. The main purpose of the ST-LINK is to provide the ability to interface with the serial wire debug (SWD) interface of the MCU via USB.

There are a variety of integrated development environments (IDEs) which can be used to interact with the device including PlatformIO, Keil μVision, and SEGGER Embedded Studio. The IDEs provide a helpful wrapper around compiler toolchains such as GNU Compiler Collection (GCC) toolchain to facilitate easy programming and debugging. In this course you are welcome to use any IDE you would like, although instruction and support will be focused around SEGGER Embedded Studio which is based on the GCC toolchain.[^1]


## UPduino v3.1 FPGA Development Board

The UPduino v3.1 is developed by tinyvision.ai and designed around a Lattice Semiconductor UP5K field programmable gate array (FPGA). Section 5.3 of the iCE40 UltraPlus Family Data Sheet (FPGA-DS-02008-2.0) explains the naming of the chip.

::: {#fig-ic40-part-number-description}
![](images/ice40_part_number_description.png)

ice40 Part Number Description
:::

The Lattice UP5K is very similar to the Cyclone IV architecture that is used to introduce FPGAs in E85.
At its root, the FPGA consists of Logic Cells (Lattice’s version of the Intel/Altera Logic Elements you learned about in E85) which can be internally connected within Programmable Logic Blocks (PLBs) within the FPGA to form digital circuits.
Each Logic Cell (LC) consists of a 4-input look-up table (LUT) and a programmable D flip-flop, along with additional clock control and carry logic. 
Figure 3.2 from the FPGA datasheet shows the basic architecture of a PLB and LC.

::: {#fig-ice40-plb-block-diagram}
![](images/ice40_plb_block_diagram.png)

ice40 PLB Block Diagram.
:::

The UP5K on our UPduino v3.1 board is the 48-pin QFN package.
As you can see from the table, it contains 5280 logic cells, 30 Embedded Block Ram (EBR) Memory Blocks of 4 Kbits each, 4 256-bit Single Port synchronous RAM Memory Blocks, and an on-board high-frequency (48 MHz) and low-frequency (10 kHz) oscillator.

::: {#fig-ice40-resource-table}
![](images/ice40_resource_table.png)

ice40 Resource Table.
:::

### Digital Design Synthesis and Programming

The FPGA is programmed using the onboard programmer via the synthesis tool Lattice Radiant. After setting up and compiling the Radiant project, Radiant will generate bitstream files which are used to configure the FPGA.

More details will be provided later in this lab writeup.

## Development Board Assembly
Before you start working on your FPGA design, you need to assemble your development board as described in [this tutorial](/tutorials/tutorial-posts/dev-board-assembly/index.qmd). The majority of your time on this lab will likely be spent assembling the board, so make sure to plan ahead.

## FPGA Design

Now it’s your turn to take the wheel and create your own design and dust off your digital design chops! Your goal is to write some Verilog modules to further test the hardware on your board and operate a 7-segment display. The system should have the following inputs and outputs:

| Signal  Name | Signal Type | Description |
|--------------|-------------|-------------|
| `clk`     | input| 48 MHz clock on FPGA |
| `s[3:0]`  | input| the four DIP switches (on the board, SW6) |
| `led[2:0]`| output| 3 LEDs (you may use the on-board LEDs) |
| `seg[6:0]`| output| the segments of a common-anode 7-segment display |

The following tables define the relationship of the LEDs to the switches and clock.

::: {.center-table}
| `S1` | `S0` | `led[0]` |
|:----:|:----:|:--------:|
| 0  | 0  | OFF    |
| 0  | 1  | ON     |
| 1  | 0  | ON     |
| 1  | 1  | OFF    |
:::

::: {.center-table}
| `S3` | `S2` | `led[1]` |
|:----:|:----:|:--------:|
| 0    | 0    | OFF      |
| 0    | 1    | OFF      |
| 1    | 0    | OFF      |
| 1    | 1    | ON       |
:::

::: {.center-table}
| `led[2]` |
|:--------:|
| Blink at 2.4 Hz|
:::

::: {.callout-tip title="Clock Generation"}
To generate the clock for your design, use the onboard high-speed oscillator.
This is the same strategy as in the FPGA testing source code you downloaded earlier to test the board.
If you look at that Verilog code, you'll notice an instantiated module called HSOSC (for High-Speed OSCillator).
This module is part of the iCE40 Technology Library (see the iCE40 Technology Library document linked on the course website) and is a built-in module included with Lattice Radiant designed for controlling the internal oscillator on the iCE40 chip.
You can simply copy the line from the testing program and use it in your project.
:::

### Create Your Git Repository

The first step before you begin writing any code is to create a Git repository.
Follow the following steps to get started with your project.

1. Create a new folder for your project. Here is a suggested template folder structure to use. Add a few sentences to your README to describe the contents of the repository. For example, for this lab you might say something about holding code to verify that your FPGA and MCU are working properly.

```markdown
/
├── fpga
│   ├── src
│   ├── sim
│   ├── radiant_project
│   ├── .gitignore
├── mcu
│   ├── src
│   ├── segger_project
│   ├── .gitignore
├── README.md
```


2. Populate your .gitignore files. This file tells git which files and folders should not be tracked. It's best practice to ignore many of the miscellaneous configuration files that Radiant and SEGGER Embedded Studio generate. Sample .gitignore files are included below. Paste the contents of these files into the .gitignore files you created.

> Sample Radiant .gitignore
  ```
  # Lattice Radiant files
  *.html
  impl*/
  *.xml
  .build_status
  .run_manager.ini
  .recovery
  .spread_sheet.ini
  .spreadsheet_view.ini
  *.dir/
  *.log
  *.tcl
  *.ccl
  *.srp
  *.dmp
  ._Real_._Math_.vhd
  ```

> Sample SEGGER Embedded Studio .gitignore
  ```
  # Segger Embedded Studio
  **/Output/
  **/Debug/
  *.emSession
  *.jlink
  ```

3. Initialize your git repository using `git init`.
4. Add the existing files in your folder using `git add .`. (Note: the `.` means to add all the contents of the current directory, so you'll need to make sure you're at the root).
5. Make an initial commit with the folder structure above by typing `git commit -m "Initializing Lab 1 repository"`.
6. Open the Github web interface and create a new repository on Github ([link](https://github.com/new)). Name your repository something descriptive like `e155-lab1`. Optionally add a short description.
7. Link your local git repository to the new remote repository by adding a new remote. This will look something like `git remote set-url origin git@github.com:<username>/<repo>.git` where you'll need to replace `<username>` and `<repo>` with your specific information. For my example, this command is ``git remote set-url origin git@github.com:joshbrake/e155-lab1.git`
8. Push your local commit to the remote using `git push origin main`. If git complains that it doesn't know what main is, then your branch might be named master. In this case, run `git branch -m master main` and run the push command again.
9. Navigate to your repository page on Github and you should see your folder structure there.

Here's a video walking through the steps above as well.

<div style="position: relative; padding-bottom: 64.63195691202873%; height: 0;"><iframe src="https://www.loom.com/embed/ee828a5b3c024653a9c210d2451a7251?sid=844f2d0e-c6b0-47ef-aacd-5e7cb4b36aab" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe></div>

### Design and Synthesis in Radiant

The 7-segment display should display a single hexadecimal digit specified by `s[3:0]`.
Be sure each digit can be distinguished from other digits (e.g., b and 8 should look different).
Remember that you will be using a common anode display. The anode (positive terminal) of all of the LEDs is tied to 3.3 V through a single (“common”) pin.
Each segment’s cathode (negative terminal) is connected to a pin.
Therefore, you will need 7 separate control signals. Remember that a logic 0 applied to the cathode will turn on the segment. The segments are defined as shown below. Let `seg[0]` be A and `seg[6]` be G.

::: {#fig-seven-segment-map}

![Seven-segment display segment mapping](images/seven_seg_map.png){width=25%}

Seven-segment display pin map
:::


Launch Lattice Radiant and start the New Project Wizard from the File or startup menu. Setup a new project for the UP5K chip following the instructions in the [Lattice Radiant Tutorial](/tutorials/tutorial-posts/lattice-radiant-ice40-ultraplus-project-setup) on the E155 website.

Choose `File → New` and create a SystemVerilog HDL file.
Save the file as `lab1_xx.sv` in your project directory and check the box to add the file to the current project. Create modules to perform the functions described above. The 7-segment display decoder should be combinational logic. 
Use a reasonable amount of hierarchy. Name the top-level module `lab1_xx`.
The 7-segment display code, for example, will be reused in future labs, so it should be a module of its own (for the sake of reusability you may want to put this in a separate SystemVerilog file but this is not required). 
Every module should begin with a comment section that includes your name and email address, the date of creation, and a brief summary of its purpose, so that somebody else can understand what the module does and get a hold of you if they need help with it. Comment the modules as appropriate.


### Logic Simulation in ModelSim

The next step is to simulate your logic with ModelSim. Open ModelSim from Radiant from the Tools->QuestaSim Lattice Edition menu or the icon in the toolbar. The ModelSim window will open. Get in the habit of watching the transcript window to look for errors and to familiarize yourself with what a good run looks like. If you see errors, close ModelSim, correct your Verilog code in Radiant, and reopen ModelSim. You can also edit the file directly in ModelSim and recompile there without going through the entire synthesis pipeline in Radiant.

::: {.callout-note}
Some of your designs may include modules from the iCE40 Technology Library (e.g., the HSOSC module we are using to generate our clock signal).
If you try to simulate a design including one of these modules, you need to be sure to include the library.
When you simulate a design that includes a module from the iCE40 Technology Library, make sure that you include the library by adding under the Libraries tab of the Start Simulation window as shown below.
You can also use the `-L` flag in the command line to `vsim`.
:::

#### Starting Simulation

In QuestaSim/ModelSim, simulate your module by choosing `Simulate → Start Simulation...`. Click on the + symbol next to the work library and select your code (`lab1_xx`).

If the wave pane isn’t open, open it by choosing View → Wave. View all of the inputs and outputs of your design by selecting them in the Objects window and dragging them to the Waves window. In a more complicated design, you may wish to examine internal signals as well.

Manually test your design by forcing the inputs to specific values and then advancing the simulation using “run.” In the transcript window, type:


```
force s 0000
run 100
force s 0001
run 100
force s 0010
run 100
...
```

::: {.callout-tip title="Watch Out for Optimization"}
If you're not seeing all the signals in your design, it's possible that QuestaSim optimized them away. To configure the optimization settings, see the relevant section in the [QuestaSim/ModelSim tutorial](/tutorials/tutorial-posts/modelsim-simulation-tutorial#preventing-optimization).
:::

You should see the `led` and `seg` outputs displaying appropriate values. Check the outputs against your expectations. If you find any discrepancies, fix the code and resimulate. A helpful shortcut to avoid restarting ModelSim is that you can edit the module by finding it under “work” in the library pane, right clicking, and choosing Edit. Make your fixes, then right click again and choose `Recompile`. Then type `restart -f` in the transcript window to restart simulation without having to set up the waveforms window again. When you return to Radiant, you’ll find your corrected code.


### Pin Assignment

Next, assign pins to relate the signal names in your Verilog code to physical pin numbers on the FPGA. Launch Tools → Device Constraint Editor. A table listing all inputs and outputs for the project should appear. Under Pin, type the pin number to associate with the given signal.


::: {#fig-pin-radiant-assignment}

![](images/radiant_pin_assignments.png)

Radiant pin assignments.
:::

The FPGA pinouts are shown in the Board Schematic. Most of the user input/output (I/O) pins are tapped out to the headers and labeled on the board silk screen. Some have special functions; for example, FPGA pin P42 is connected to LED D6.

The pin numbers for the LEDs and switches are marked on the board’s silkscreen. For the outputs for the 7-segment display, you may select any I/O pins you’d like. Do make sure that these pins are not being used for other purposes.

The Device Constraint Editor is also the place where you can configure the pullup resistors for the I/O pins. To do this, examine the `PULLMODE` column for any input pins. In your design, this will be the pins connected to `s[3:0]`. These should be configured with pull-up resistors to avoid invalid logic levels (the exact value is not very important. A value between 10k and 100k is generally sufficient).


### Seven Segment Display Circuit

The 7-segment display will be used throughout the class for general output of numbers. In this lab assignment, though, it will be used to output the hexadecimal number entered by the user through the DIP switches.

Each segment of the display works as an independent LED. Therefore, the same current-limiting concern with the LEDs applies to the display as to the on-board bank of LEDs. You can limit the current into each segment of the display the same way you did for the LEDs on board, adding a suitable resistor to provide roughly 5-20 mA of current. You can find resistors and other such components in the supply cabinet or in the stockroom.

Consult the data sheet for the pinout of the common anode dual seven segment display. All seven segments share the same anode, which should be connected to VCC (3.3 V). Each of the segments has its own cathode, which can be pulled to 0 to turn on the segments.

Be sure to turn power off before wiring circuits on your board. You can choose either side of the display to use in this lab. After deciding on which side to use, you will need to connect the VDD pin of that side (either VDD1 or VDD2) to 3.3 V. Then connect the input pins of the same side of the display to the header pins you chose. Remember to add suitable resistors between each of the inputs to the display and the header pins. These LEDs are common anode LEDs. That is, all the anodes from the LEDs are connected to a single VDD (VDD1 or VDD2). You are driving the cathode of each LED. Given this information, you might need to modify your Verilog file. Do so in the simplest way possible.


### Generating the FPGA Configuration Files

Now you will synthesize your HDL into a programming file to be transferred onto the FPGA. This outputs a binary file (`.bin`) in your project directory that can be used to program the FPGA directly over JTAG using the onboard USB programmer. Be sure your SystemVerilog files are saved, and click the green “Play” triangle to start the synthesis process. To help sort the many messages that the compilation process generates, click a tab under the Message area to see only that type of message. If compilation is successful but generates warnings, check the Warning and Error tabs for errors relevant to your design. Warnings about incomplete I/O assignments may be ignored if you have in fact assigned all relevant I/O pins.

`Launch Tools → Netlist Analyzer` and examine the RTL schematic of your design. This shows the logic synthesized from your Verilog design. Ensure the hardware matches your expectations.

Look at the Reports tab. In the Project Summary under Resource Usage you should see a total number of registers and pins that match your expectations. Under Analysis & Synthesis, you can see how the logic blocks and registers are broken down in each module. Under Fitter, the Pin-Out File should match the pin assignments you intended.

::: {.callout-tip title="Troubleshooting Tips"}

If some of you are seeing issues with specific pins on your FPGA there could be a few different reasons and corresponding steps to take to troubleshoot.

- You could have an electrical short which is causing some pins to be electrically connected that should not due to solder bridges. Double check to make sure that the pins are isolated and not connected together by checking the resistance between the pins with a multimeter.
- You are trying to use a pin that is shared between the FPGA and the MCU and the MCU is not leaving that pin floating or it is driving it as an output. You can get around this by wiping the code on the MCU by uploading a file with a blank main function.
- You should also read through the Nucleo board documentation to see what pins have special functions that are used by default by the MCU. Hint: You likely want to stay away from using the pins that the MCU uses for serial communication by default.

:::

## AI Prototype and Reflection

Don't forget to complete the [AI Prototype](ai-prototype.qmd) and reflect on it in your lab 1 writeup.

[^1]:
     In order for the NUCLEO board to be compatible with SEGGER, it is necessary to reflash the ST-LINK programmer with SEGGER J-Link firmware to convert it to a J-Link. This has been already taken care of on the board in your kit, but if you want to use another STM32 board with SEGGER you’ll need to follow the instructions [here](https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/) to do this yourself.


{{< include /resources/github-issue-footer.qmd >}}